import streamlit as st
import sqlite3
import requests
from math import radians, cos, sin, asin, sqrt

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in km
    d_lat = radians(lat2 - lat1)
    d_lon = radians(lon2 - lon1)
    a = sin(d_lat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(d_lon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c

def get_train_fare(start_city, destination):
    """Fetch estimated train fare from OJPFare API."""
    try:
        url = "https://api.opentransportdata.swiss/ojpfare"
        params = {
            "origin": start_city,
            "destination": destination,
            "format": "json"
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get("fare", {}).get("total", "N/A")  # Get total fare if available
    except:
        pass
    return "N/A"

st.title("Travel Planner")

# Train travel preferences
st.header("🚆 Train Travel Preferences")

city_names = [row[0] for row in cursor.execute("SELECT name FROM cities").fetchall()]
activity_names = [row[0] for row in cursor.execute("SELECT name FROM activities").fetchall()]

start_city_train = st.selectbox("Select your departure city:", city_names, key="train_start")
max_duration_train = st.slider("Maximum travel duration (hours):", min_value=1, max_value=24, value=6, key="train_duration")
max_budget = st.slider("Maximum train fare (CHF):", min_value=10, max_value=500, value=100, key="train_budget")
activity_train = st.selectbox("Preferred activity:", activity_names, key="train_activity")

st.markdown("### Summary:")
st.write(f"Traveling from **{start_city_train}** by **train**, max duration: **{max_duration_train}h**, max budget: **{max_budget} CHF**, activity: **{activity_train}**.")

if st.button("Get train recommendations"):
    cursor.execute("SELECT latitude, longitude FROM cities WHERE name = ?", (start_city_train,))
    start_coords = cursor.fetchone()

    if start_coords:
        lat1, lon1 = start_coords
        max_distance = max_duration_train * 100  # Approximate 100 km/h speed for train

        cursor.execute("SELECT id, name, latitude, longitude FROM cities WHERE name != ?", (start_city_train,))
        cities = cursor.fetchall()

        matching_cities = []
        for city_id, city_name, lat2, lon2 in cities:
            distance = haversine(lat1, lon1, lat2, lon2)
            if distance <= max_distance:
                estimated_fare = get_train_fare(start_city_train, city_name)
                if estimated_fare != "N/A" and estimated_fare <= max_budget:
                    cursor.execute('''
                        SELECT description FROM city_activities
                        JOIN activities ON city_activities.activity_id = activities.id
                        WHERE city_activities.city_id = ? AND activities.name = ?
                    ''', (city_id, activity_train))
                    results = [r[0] for r in cursor.fetchall() if r[0]]
                    if results:
                        matching_cities.append((city_name, estimated_fare, results))

        st.markdown("### 🔍 Matching Train Destinations")
        if matching_cities:
            for city_name, fare, activities in matching_cities[:10]:
                st.markdown(f"**{city_name}** - Train Fare: **{fare} CHF**")
                for act in activities:
                    st.write(f"- {act}")
        else:
            st.info("No destinations match your criteria.")
